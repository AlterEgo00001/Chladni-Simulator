#version 300 es
// Фрагментный шейдер для отрисовки частиц
// Определяет цвет и форму частицы.

precision highp float;

uniform vec3 u_globalColor; // Базовый цвет частиц (изменяется на CPU в зависимости от частоты)
uniform float u_maxAmplitude; // Максимальная амплитуда смещения (для нормировки цвета)

in float vDisplacementMagnitude; // Величина смещения частицы (из вершинного шейдера)

out vec4 outColor;

void main() {
    // Создание круглой формы точки
    vec2 p = gl_PointCoord - 0.5; // gl_PointCoord: [0,0] в левом нижнем углу точки, [1,1] в правом верхнем
                                 // p: [-0.5, -0.5] до [0.5, 0.5]
    if (dot(p, p) > 0.25) { // Если расстояние от центра > 0.5 (радиус 0.5)
        discard; // Отбрасываем фрагмент, чтобы получить круг
    }

    // Расчет цвета на основе величины смещения
    // Нормируем величину смещения относительно максимальной амплитуды, чтобы получить множитель от 0 до 1
    // Используем clamp для безопасности, 1e-9 для избежания деления на ноль.
    float normalizedDisp = clamp(vDisplacementMagnitude / (u_maxAmplitude * 0.5 + 1e-9), 0.0, 1.0);
    
    // Смешиваем базовый цвет с более темным/менее насыщенным цветом для частиц, 
    // находящихся в областях с низким смещением (ближе к узловым линиям).
    // normalizedDisp * normalizedDisp используется для усиления контраста (нелинейная интерполяция).
    vec3 color = mix(u_globalColor * 0.5, u_globalColor, normalizedDisp * normalizedDisp); 
    
    // Придаем частицам легкий объемный вид, делая их ярче к центру
    float intensity = 1.0 - length(p); // Максимально в центре (1.0), минимально на краях (0.0)
    color *= intensity;

    outColor = vec4(color, 1.0);
}
