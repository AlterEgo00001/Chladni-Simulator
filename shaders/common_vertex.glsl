/*
 * common_vertex.glsl
 * Общий вершинный шейдер для GPGPU-вычислений.
 * 
 * Назначение:
 * Просто передать UV-координаты во фрагментный шейдер.
 * Мы рендерим полноэкранный квадрат, чтобы фрагментный шейдер
 * мог работать с каждым пикселем текстуры данных как с отдельной
 * ячейкой сетки или частицей.
 */

// Атрибут `uv` передается из геометрии THREE.PlaneGeometry.
// Он содержит координаты текстуры для каждой вершины (от 0.0 до 1.0).
attribute vec2 uv;

// `varying` - это переменная, которая передается из вершинного шейдера
// во фрагментный. GPU автоматически интерполирует её значение для каждого пикселя.
varying vec2 vUv;

void main() {
    // Просто присваиваем UV-координаты, чтобы они были доступны во фрагментном шейдере.
    vUv = uv;

    // `projectionMatrix`, `modelViewMatrix`, `position` - это стандартные переменные three.js.
    // Эта строка преобразует координаты вершин нашего квадрата в экранные координаты.
    // В результате на экране будет нарисован квадрат, покрывающий весь вьюпорт.
    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
}